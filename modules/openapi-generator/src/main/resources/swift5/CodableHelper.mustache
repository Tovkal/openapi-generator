//
// CodableHelper.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

enum DateError: String, Error {
    case invalidDate
}

{{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}open{{/nonPublicApi}} class CodableHelper {

    private static var customDateFormatter: DateFormatter?
    private static var defaultDateFormatter: DateFormatter = OpenISO8601DateFormatter()
    private static var customJSONDecoder: JSONDecoder?
    private static var defaultJSONDecoder: JSONDecoder = {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .custom({ (decoder) -> Date in
                                                       let container = try decoder.singleValueContainer()
                                                       let dateStr = try container.decode(String.self)

                                                       let formatters = [
                                                           "yyyy-MM-dd",
                                                           "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                                                           "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                                                           "yyyy-MM-dd'T'HH:mm:ss'Z'",
                                                           "yyyy-MM-dd'T'HH:mm:ss.SSS",
                                                           "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
                                                           "yyyy-MM-dd HH:mm:ss",
                                                           "dd/MM/yyyy"
                                                           ].map { (format: String) -> DateFormatter in
                                                               let formatter = DateFormatter()
                                                               formatter.locale = Locale(identifier: "en_US_POSIX")
                                                               formatter.dateFormat = format
                                                               return formatter
                                                       }

                                                       for formatter in formatters {
                                                           if let date = formatter.date(from: dateStr) {
                                                               return date
                                                           }
                                                       }

                                                       throw DateError.invalidDate
                                                   })
        return decoder
    }()
    private static var customJSONEncoder: JSONEncoder?
    private static var defaultJSONEncoder: JSONEncoder = {
       let encoder = JSONEncoder()
       let formatter = DateFormatter()
       formatter.calendar = Calendar(identifier: .iso8601)
       formatter.locale = Locale(identifier: "en_US_POSIX")
       formatter.timeZone = TimeZone(secondsFromGMT: 0)
       formatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ"
        encoder.dateEncodingStrategy = .formatted(formatter)
        encoder.outputFormatting = .prettyPrinted
        return encoder
    }()

    {{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}public{{/nonPublicApi}} static var dateFormatter: DateFormatter {
        get { return self.customDateFormatter ?? self.defaultDateFormatter }
        set { self.customDateFormatter = newValue }
    }
    {{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}public{{/nonPublicApi}} static var jsonDecoder: JSONDecoder {
        get { return self.customJSONDecoder ?? self.defaultJSONDecoder }
        set { self.customJSONDecoder = newValue }
    }
    {{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}public{{/nonPublicApi}} static var jsonEncoder: JSONEncoder {
        get { return self.customJSONEncoder ?? self.defaultJSONEncoder }
        set { self.customJSONEncoder = newValue }
    }

    {{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}open{{/nonPublicApi}} class func decode<T>(_ type: T.Type, from data: Data) -> Result<T, Error> where T: Decodable {
        return Result { try self.jsonDecoder.decode(type, from: data, allowFragments: true) }
    }

    {{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}open{{/nonPublicApi}} class func encode<T>(_ value: T) -> Result<Data, Error> where T: Encodable {
        return Result { try self.jsonEncoder.encode(value) }
    }
}

{{#nonPublicApi}}internal {{/nonPublicApi}}extension CodingUserInfoKey {

    static let fragmentBoxedType = CodingUserInfoKey(
        rawValue: "CodingUserInfoKey.fragmentBoxedType"
        )!
}

{{#nonPublicApi}}internal {{/nonPublicApi}}extension JSONDecoder {

    {{#nonPublicApi}}private{{/nonPublicApi}} struct FragmentDecodingBox<T: Decodable>: Decodable {

        var value: T

        init(from decoder: Decoder) throws {
            let type = decoder.userInfo[.fragmentBoxedType] as! T.Type
            var container = try decoder.unkeyedContainer()
            self.value = try container.decode(type)
        }
    }

    {{#nonPublicApi}}private{{/nonPublicApi}} func copy() -> JSONDecoder {
        let decoder = JSONDecoder()
        decoder.dataDecodingStrategy = dataDecodingStrategy
        decoder.dateDecodingStrategy = dateDecodingStrategy
        decoder.keyDecodingStrategy = keyDecodingStrategy
        decoder.nonConformingFloatDecodingStrategy = nonConformingFloatDecodingStrategy
        decoder.userInfo = userInfo
        return decoder
    }

    {{#nonPublicApi}}public{{/nonPublicApi}} func decode<T: Decodable>(
        _ type: T.Type, from data: Data, allowFragments: Bool
    ) throws -> T {
        if let json = try? decode(type, from: data) {
            return json
        }

        guard
            (try? JSONSerialization.jsonObject(with: data)) == nil,
            allowFragments
        else {
            return try decode(type, from: data)
        }

        let jsonObject = try JSONSerialization
            .jsonObject(with: data, options: .allowFragments)
        let boxedData = try JSONSerialization.data(withJSONObject: [jsonObject])

        let decoder = copy()
        decoder.userInfo[.fragmentBoxedType] = type

        return try decoder.decode(FragmentDecodingBox<T>.self, from: boxedData).value
    }
}
